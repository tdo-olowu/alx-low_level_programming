==162== Memcheck, a memory error detector
==162== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==162== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==162== Command: ./2-calloc
==162== Parent PID: 72
==162== 
==162== Invalid write of size 4
==162==    at 0x10934B: _calloc (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
==162==    by 0x10928C: main (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
==162==  Address 0x4a490a0 is 96 bytes inside a block of size 98 alloc'd
==162==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==162==    by 0x10931D: _calloc (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
==162==    by 0x10928C: main (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
==162== 

valgrind: m_mallocfree.c:280 (mk_plain_bszB): Assertion 'bszB != 0' failed.
valgrind: This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==162==    at 0x58046FFA: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x58047127: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x580472CB: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x580519A4: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x58005BF7: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x580A7204: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)
==162==    by 0x580F5FD4: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/memcheck-amd64-linux)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 162)
==162==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==162==    by 0x48D5D33: _IO_file_doallocate (filedoalloc.c:101)
==162==    by 0x48E5EFF: _IO_doallocbuf (genops.c:347)
==162==    by 0x48E4F5F: _IO_file_overflow@@GLIBC_2.2.5 (fileops.c:745)
==162==    by 0x48E36E4: _IO_new_file_xsputn (fileops.c:1244)
==162==    by 0x48E36E4: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1197)
==162==    by 0x48CA9A1: __vfprintf_internal (vfprintf-internal.c:1373)
==162==    by 0x48B5D6E: printf (printf.c:33)
==162==    by 0x109254: simple_print_buffer (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
==162==    by 0x1092DA: main (in /ALX-SE/alx-low_level_programming/0x0C-more_malloc_free/2-calloc)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFEFFFC60
valgrind stack range: [0x1002BAA000 0x1002CA9FFF] top usage: 9480 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

